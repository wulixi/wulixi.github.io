### InnoDB中的B+树

##### 学习目标

- 掌握B+树的并发访问方式
- 掌握记录的增删查改对B+树的访问
- 掌握树结构变更的细节

#### B+树的并发访问方式

innodb中对B+树的并发控制的逻辑在`btr_cur_search_to_nth_level()`函数中。下面通过阅读该函数来分析具体的并发控制方式。

对于`btr_cur_search_to_nth_level()`函数来说，有以下几种加锁方式，我们将逐个分析在某种加锁方式下，B+树的并发访问控制方式。

``` c++
enum btr_latch_mode {
 	/** Search a record on a leaf page and S-latch it. */
	BTR_SEARCH_LEAF = RW_S_LATCH,
	/** (Prepare to) modify a record on a leaf page and X-latch it. */
	BTR_MODIFY_LEAF	= RW_X_LATCH,
	/** Obtain no latches. */
	BTR_NO_LATCHES = RW_NO_LATCH,
	/** Start modifying the entire B-tree. */
	BTR_MODIFY_TREE = 33,
	/** Continue modifying the entire B-tree. */
	BTR_CONT_MODIFY_TREE = 34,
	/** Search the previous record. */
	BTR_SEARCH_PREV = 35,
	/** Modify the previous record. */
	BTR_MODIFY_PREV = 36,
	/** Start searching the entire B-tree. */
	BTR_SEARCH_TREE = 37,
	/** Continue searching the entire B-tree. */
	BTR_CONT_SEARCH_TREE = 38 
}
```

##### BTR_SEARCH_LEAF=RW_S_LATCH

​		这种加锁方式用来读取数据页上的一条记录。当定位到叶子节点时，会对叶子节点加S锁。当`latch_mode=BTR_SEARCH_LEAF`时，`btr_cur_search_to_nth_level()`函数的流程如下：

``` c++
btr_cur_search_to_nth_level(mtr,latch_mode) {
    //记录下搜索开始前mtr锁栈的位置，因为定位到叶子节点时需要释放检索B+树过程中申请的锁。
    int savepoint = mtr_set_savepoint(mtr);
    //获取索引的S-latch
    mtr_s_lock(dict_index_get_lock(index), mtr);
    //设置对中间节点的加锁方式，一律加S-latch
    int upper_rw_latch = RW_S_LATCH;
    //如果root节点同时是叶节点（只有一层）,则要改变加锁策略
    //具体来说当是修改操作的时均加X锁，当是读取操作
    时均加S锁
    root_leaf_rw_latch=btr_cur_latch_for_root_leaf(latch_mode);
    int height = ULINT_UNDEFINED;
    //开始往下搜索
search_loop:
    rw_latch = RW_NO_LATCH;
    if (height != 0) {
        //如果是中间节点，则加S锁
        rw_latch = upper_rw_latch;
    } else {
        //如果是叶子节点，则加S锁
        rw_latch = latch_mode;
    }
retry_page_get:
    //对获取的数据页加S锁
    block = buf_page_get_gen(page_id,rw_latch);
	//如果是根节点，记录一些高度信息
    if (UNIV_UNLIKELY(height == ULINT_UNDEFINED)) {
        height = btr_page_get_level(page, mtr);
        root_height = height;
        cursor->tree_height = root_height + 1; 
    }
    //如果是叶子节点
    if(height == 0) {
        if(!s_latch_by_caller
          && !srv_read_only_mode
          && !modify_external) {
            //0.1 释放索引S锁
            mtr_release_s_latch_at_savepoint(
            	mtr, savepoint, dict_index_get_lock(index));
        }
        //0.2 释放所持有的锁
        for (; n_release < n_blocks; n_release++) {
            mtr_release_block_at_savepoint(mtr, tree_savepoints[n_release],
                                          tree_blocks[n_release]);
        }
        page_mode = mode;	//叶节点的搜索模式采用用户指定的搜索模式
        //0.3 搜索页面，放置游标
        page_cur_search_with_match(block, index, tuple, page_mode, &up_match,
                                  &low_match, page_cursor, need_path? cursor->rtr_info:NULL);
    }
   	//如果是中间节点
    if(level != height) {
		/* 获取下一层的节点信息 */
		page_id.reset(
			space,
			btr_node_ptr_get_child_page_no(node_ptr, offsets));
		n_blocks++;
        goto search_loop;
    }
    //最后设置游标信息
    cursor->low_match = low_match;
	cursor->low_bytes = low_bytes;
	cursor->up_match = up_match;
	cursor->up_bytes = up_bytes;
}
```

##### BTR_MODIFY_LEAF = RW_X_LATCH

​		这种加锁方式用于修改一个叶子节点上的记录，而且修改记录时不会导致树结构改变。在InnoDB里，所有的**修改操作**都会首先尝试使用`BTR_MODIFY_LEAF`的方式加锁，如果使用此种加锁方式不成功（说明此次修改操作会导致树结构发生改变），则会使用`BTR_MODIFY_TREE`来进行加锁。

`BTR_MODIFY_LEAF`加锁模式下，`btr_cur_search_to_nth_level()`的流程如下所示。

```c++
btr_cur_search_to_nth_level(mtr, latch_mode) {
    //记录下此时mtr锁栈的位置，此时mtr还未获取该B+树的任何锁（包括索引锁）
    savepoint = mtr_set_savepoint(mtr);
    //对索引加S锁
    mtr_s_lock(dict_index_get_lock(index), mtr);
    //设置对中间节点的加锁模式
    int upper_rw_latch = RW_S_LATCH;
    //如果根节点是叶节点，则对根节点加X锁
    int root_leaf_rw_latch = btr_cur_latch_for_root_leaf(latch_mode);
    int height = ULINT_UNDEFINED;
    //向下搜索循环
search_loop:
    int rw_latch = RW_NO_LATCH;
    if (height != 0) {
        if(modify_external
          && height == ULINT_UNDEFINED
          && upper_rw_latch == RW_S_LATCH) {
            //如果本次修改涉及到外部存储字段的修改，且访问的是根节点，则加SX锁
            rw_latch = RW_SX_LATCH;
        } else {
            //如果只是中间节点，则加S锁
            rw_latch = upper_rw_latch;
        }
    } else {
        //如果是叶子节点，则改加X锁
        rw_latch = latch_mode;
    }
retry_page_get:
    //以rw_latch指定的锁模式加锁
    buf_page_get_gen(page_id, rw_latch);
    //获取树高，设置cursor的某些成员
    if (height == ULINT_UNDEFINED) {
        height = btr_page_get_level(page, mtr);
        root_height = height;
        cursor->tree_height = root_height+1;
    }
    //如果搜索到叶子节点
    if (height == 0) {
        //释放索引的S锁
        mtr_release_s_latch_at_savepoint(mtr, savepoint,
                                        dict_index_get_lock(index));
		//释放已获取的中间节点的锁
        for(; n_release<n_blocks; n_release++) {
            mtr_release_block_at_savepoint(
            	mtr, tree_savepoint[n_release],
            	tree_block[n_release]);
        }
        page_mode = mode;
    }
    //搜索页上的记录（中间节点）
    if (height != 0) {
    	page_cur_search_with_match_bytes(
        	block, index, tuple, page_mode, &up_match, &low_match, page_cursor);
    }
    //如果是中间节点或没到目的层，则获取叶子节点的页号
    if (level != height) {
        //获取指向子节点的指针
        node_ptr = page_cur_get_rec(page_cursor);
        offsets = rec_get_offsets(
            node_ptr, index, offsets, ULINT_UNDEFINED, &heap);
        //转到子节点
        page_id.reset(space, btr_node_ptr_get_child_page_no(node_ptr, offsets));
        n_blocks++;
    }
    //最后设置游标信息
	cursor->low_match = low_match;
	cursor->low_bytes = low_bytes;
	cursor->up_match = up_match;
	cursor->up_bytes = up_bytes;    
}
```

##### BTR_MODIFY_TREE

​		这种加锁方式用于修改树的结构。当一个修改操作使用`BTR_MODIFY_LEAF`加锁方式（乐观更新）发现不成功时，会采用`BTR_MODIFY_TREE`这种方式，也就是要进行悲观更新。`InnoDB`这部分的代码在`5.7`之后发生了较大的变化，里面杂糅了多个B+树并发控制的思想。在`MySQL 5.6`中，如果要进行树结构变更，会首先对索引加`RW_X_LATCH`将整个树锁住。而在`MySQL 5.7`中，在进行树结构变更时，可以只锁住要修改的分支，这样就可以降低B+树读写线程的冲突。

在`BTR_MODIFY_TREE`的加锁模式下，`btr_cur_search_to_nth_level()`函数的执行流程如下所示：

``` c++
btr_cur_search_to_nth_level(mtr, latch_mode) {
    //获取mtr锁栈的位置，此时线程还未获取任何B+树相关的锁(包括index锁)
    savepoint = mtr_set_savepoint(mtr);
    /*这里有个判断，如果purge任务比较重，则会对树加RW_X_LATCH来对整个B+树加锁，
      主要防止其他线程再进行读写。如果purge任务不重，则走正常的加锁逻辑，即对索引
      加RW_SX_LATCH，这时其他线程可以再不与此线程发生冲突的情况下读写。*/
    if (lock_intention == BTR_INTENTION_DELETE
		&& trx_sys->rseg_history_len > BTR_CUR_FINE_HISTORY_LENGTH
		&& buf_get_n_pending_read_ios()) {
        mtr_x_lock(dict_index_get_lock(index), mtr);
    } else {
        mtr_sx_lock(dict_index_get_lock(index), mtr);
    }
    //对中间节点加RW_X_LATCH锁
    upper_rw_latch = RW_X_LATCH;
    //如果是根节点，则对根节点加RW_X_LATCH锁
    root_leaf_rw_latch = btr_cur_latch_for_root_leaf(latch_mode);
    height = ULINT_UNDEFINED;
search_loop:
    /* 对所有节点（根节点除外）的默认加锁方式，即对于BTR_MODIFY_TREE
    的加锁方式，所有中间节点都会首先加`RW_NO_LATCH`锁。*/
	rw_latch = RW_NO_LATCH;   
retry_page_get:
    //以rw_latch指定的锁模式加锁
    buf_page_get_gen(page_id, rw_latch);
    //如果是根节点，则记录树高
    if (height == ULINT_UNDEFINED) {
        height = btr_page_get_level(page, mtr);
        root_height = height;
    }
    //如果是叶子节点，则会锁住目标节点及其左右兄弟节点
    if (height == 0) {
        if (rw_latch == RW_NO_LATCH) {
            /* btr_cur_latch_leaves函数会自左向右地对目标叶子节点及其左右
            兄弟节点加RW_X_LATCH锁。*/
            latch_leaves = btr_cur_latch_leaves();
        }
    }
    //根据搜索条件，检索节点
    page_cur_search_with_match();
    /* 检测本次修改是否对会造成当前页面的悲观更新，如果不会，则释放从根节点到
    本节点之间的所有节点的LATCH（即root节点和本节点的LATCH仍然持有）。*/
    if (!btr_cur_will_modify_tree(current_page, node_ptr_max_size)) {
        	/* we can release upper blocks */
			for (; n_releases < n_blocks; n_releases++) {
				if (n_releases == 0) {
					/* 不能释放根节点的锁 */
					continue;
				}

				/* 释放上层节点。 */
				mtr_release_block_at_savepoint(
					mtr, tree_savepoints[n_releases],
					tree_blocks[n_releases]);
			}
    }
    /* 如果到达目标层，则对锁栈内未释放的数据页（RW_NO_LATHC）加RW_X_LATCH锁，
    结合上个if的操作，可知，用户线程只锁住了可能修改的分支上的数据页。*/
    if (height == level
		&& latch_mode == BTR_MODIFY_TREE) {
		ut_ad(upper_rw_latch == RW_X_LATCH);
		/* 对未释放的分支加X-LATCH. */
		for (ulint i = n_releases; i <= n_blocks; i++) {
			mtr_block_x_latch_at_savepoint(
				mtr, tree_savepoints[i],
				tree_blocks[i]);
		}
	}
	if (level != height) {
        goto search_loop;
    } else if (latch_mode == BTR_MODIFY_TREE
              && lock_intention == BTR_INTENTION_INSERT
              && mach_read_from_4(page + FIL_PAGE_NEXT) != FIL_NULL
              && page_rec_is_last(page_cur_get_rec(page_cursor), page)) {
        /* 这个if是为了处理btr_insert_into_right_sibling()函数可能导致父节点上记录的删除。*/
        
        if(height == 0) {
			/* 释放叶子节点的锁。 */
			for (uint i = 0; i < 3; i++) {
				if (latch_leaves.blocks[i] != NULL) {
					mtr_release_block_at_savepoint(
						mtr, latch_leaves.savepoints[i],
						latch_leaves.blocks[i]);
					latch_leaves.blocks[i] = NULL;
				}
			}            
        }
        //这时需要重新检索B+树
        goto need_opposite_intention;
    }
}
```

​		上面可以看到B+树变更时，逻辑比较复杂。这里有几点需要提一下。上面函数调用了`btr_cur_need_oppsote_intention()`函数，该函数用于判断是否需要进行与本次要执行操作相关的操作。举个例子，如果我们要删除一个记录，而该记录是节点的最后一条记录或第一条记录，则会导致父节点因此而插入一条记录，如果我们要插入一个记录，且该记录会插到该节点的最后的位置，则因为可能插入到右兄弟节点，进而导致右兄弟节点的父节点上的记录删除。这种插入和修改操作，代码中用`btr_intention_t`类型来表示这几种情况：

``` c++
/* 1.为了简化代码，btr_intention_t变量的值与BTR_LATCH_FOR_INSERT和
BTR_LATCH_FOR_DELETE两种锁类型相关，并且在检索B+树时存入latch_mode
变量中。
   2.对于B+树操作只有删除和插入操作，更新操作是通过先删除后插入来实现的。
*/
enum btr_intention_t{
	BTR_INTENTION_DELETE,	//需要删除一条记录时设置，BTR_LATCH_FOR_DELETE。
	BTR_INTENTION_BOTH,
	BTR_INTENTION_INSERT	//需要插入一条记录时设置，BTR_LATCH_FOR_INSERT
}
```

##### BTR_SEARCH_LEAF && BTR_MODIFY_LEAF

​		这两种加锁方式用于向前查找记录，这是个比较奇怪的操作，因为在`InnoDB`中，记录都是按照字母表的顺序在B+树的叶子节点上自左向右存放的，我们一般情况下只会从左向右查找（不妨称为默认的访问方式）。向前查找如果不进行特别的并发控制会与默认的访问方式造成冲突，因为默认的访问是自左向右加锁的，如果前向查找会造成锁冲突。我们下面会看一下什么情况下会使用前向搜索，以及在前向搜索的情况下，B+树的加锁方式。

​		首先看一下当加锁方式为`BTR_SEARCH_LEAF`或`BTR_MODIFY_LEAF`时`btr_cur_search_to_nth_level()`函数的执行流程：

``` c++
btr_cur_search_to_nth_level(mtr, latch_mode) {
    //0. 已经检索的节点数
    n_blocks = 0;
    //0. 已经释放锁的节点数
    n_release = 0;
    //1. 获取检索开始时锁栈的位置，在检索结束时需要释放获取的锁
    savepoint = mtr_set_savepoint(mtr);
    //2. 对索引加S-LATCH
    mtr_s_lock(dict_index_get_lock(index), mtr);
    //3. 设置中间节点的加锁方式为S-LATCH
    upper_rw_latch = RW_S_LATCH;
    /*4. 如果root节点是叶子节点，则改变对root的加锁方式: 
    BTR_SEARCH_PREV 则加 RW_S_LATCH,
    BTR_MODIFY_PREV 则加 RW_X_LATCH。 */
    root_leaf_rw_latch = btr_cur_latch_for_root_leaf(latch_mode);
    height = ULINT_UNDEFINED;
search_loop:
    buf_mode = BUF_GET;
    rw_latch = RW_NO_LATCH;	//rw_latch是获取数据页的加锁方式
    
    /* 5. 如果是中间节点且是第一次检索，则设置加锁方式为`RW_S_LATCH`。 */
    if (height != 0) {
        if (!retrying_for_search_prev) {
        	rw_latch = upper_rw_latch;
        }
    } else {
        //5.1 如果是叶子节点或是第二次检索，则不加锁
        rw_latch = RW_NO_LATCH;
    }
retry_page_get:
    //记录每个块的锁在mtr锁栈中的位置
    tree_savepoints[n_blocks] = mtr_set_savepoint(mtr);
	block = buf_page_get_gen(page_id, rw_latch, buf_mode);
    tree_blocks[n_blocks] = block;
    //6. 如果是root节点，则记录树高信息
    if (height == ULINT_UNDEFINED) {
        height = btr_page_get_level(page, mtr);
        root_height = height;
    }
    //7. 如果已经定位到叶子节点，则释放上层节点。
    if (height == 0) {
		for (; n_releases < n_blocks; n_releases++) {
			mtr_release_block_at_savepoint(
				mtr, tree_savepoints[n_releases],
				tree_blocks[n_releases]);
		}
    }
    //8. 如果是中间节点
    if (level != height) {
        if ((latch_mode == BTR_SEARCH_PREV
            || latch_mode == BTR_MODIFY_PREV)
           && !retrying_for_search_prev) {
            /* 如果有前驱节点，且记录是当前页最左的记录：*/
            if (btr_page_get_prev(page, mtr) != FIL_NULL
               && page_rec_is_first(node_ptr, page)) {
                if (leftmost_from_level == 0) {
                    leftmost_from_level = height + 1;
                }
            } else {
                leftmost_from_level = 0;
            }
            /* 如果是叶子节点并且leftmost_from_level > 0，则需要重新进行检索。*/
            if (height == 0 && leftmost_from_level > 0) {
                //设置重新检索标志
                retrying_for_search_prev = true;
                
            }
        }
    }
}
```

